package com.helloglass;

//Gesture Files
import com.google.android.glass.app.Card;
import com.google.android.glass.content.Intents;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.media.AudioManager;
import android.os.Bundle;
import android.content.Intent;
import android.os.FileObserver;
import android.provider.MediaStore;
import android.speech.tts.TextToSpeech;
import android.util.Base64;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.SubMenu;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.Toast;
import org.json.*;
import org.json.simple.parser.*;
import org.apache.http.*;
import org.apache.http.message.*;
import org.opencv.android.CameraBridgeViewBase;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.*;




/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity implements TextToSpeech.OnInitListener{

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;
    HashMap<Integer,String> id_words_alpha_map= new HashMap<Integer, String>();
    String curr_string;
    int min_data_id;
    int max_data_id;
    boolean image_labeling_flag;
    private TextToSpeech tts;
    private boolean initialized = false;
    private String queuedText;

    //Create surfaceView object
    private CameraSurfaceView cameraSurfaceView;
    private static int TAKE_PICTURE_REQUEST = 1;
    private GestureDetector gestureDetector = null;

    private boolean responseImageShown = false;


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        //requests voice menu on this activity
        getWindow().requestFeature(WindowUtils.FEATURE_VOICE_COMMANDS);
        tts = new TextToSpeech(this /* context */, this /* listener */);
        //Initiate Camera View
        cameraSurfaceView = new CameraSurfaceView(this);

        //Turn on Gestures
        gestureDetector = createGestureDetector(this);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                //AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                //am.playSoundEffect(Sounds.DISALLOWED);
                openOptionsMenu();
            }
        });
        setContentView(mCardScroller);


    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        //MenuInflater inflater = getMenuInflater();
        //inflater.inflate(R.menu.activity_menu, menu);
        //menu.clear();
        System.out.println("onCreateOptionsMenu called");
        int itemIndex = 0;
        ArrayList<String> alphabetsList = new ArrayList<String>();
        ArrayList<String> wordsList = new ArrayList<String>();
        SubMenu practiceMenu = menu.addSubMenu("Practice");
        SubMenu quizMenu = menu.addSubMenu("Quiz");
        SubMenu practiceAlphaMenu = practiceMenu.addSubMenu(1, itemIndex++, 0, "Alphabets");
        SubMenu practiceWordsMenu = practiceMenu.addSubMenu(1, itemIndex++, 0, "Words");
        SubMenu practiceImagesMenu = practiceMenu.addSubMenu(1, itemIndex++, 0, "Images");
        SubMenu quizAlphaMenu = quizMenu.addSubMenu(2, itemIndex++, 0, "Alphabets");
        SubMenu quizWordsMenu = quizMenu.addSubMenu(2, itemIndex++, 0, "Words");
        SubMenu quizImagesMenu = quizMenu.addSubMenu(2, itemIndex++, 0, "Images");

        AssetManager am = this.getAssets();
        try {
            InputStream is = am.open("alphabets.txt");
            if (is != null) {
                BufferedReader bufferReader = new BufferedReader(new InputStreamReader(is));
                String line = bufferReader.readLine();
                while (line != null) {
                    alphabetsList.add(line);
                    line = bufferReader.readLine();
                }
            }

            is = am.open("words.txt");
            if (is != null) {
                BufferedReader bufferReader = new BufferedReader(new InputStreamReader(is));
                String line = bufferReader.readLine();
                while (line != null) {
                    wordsList.add(line);
                    line = bufferReader.readLine();
                }
            }
        } catch (Exception e) {

        }
        min_data_id=itemIndex;
        for (String letter : alphabetsList) {
            practiceAlphaMenu.addSubMenu(3, itemIndex++, 0, letter);
            System.out.println("Item Index");
            System.out.println(itemIndex-1);
            id_words_alpha_map.put(new Integer(itemIndex-1),letter);
        }

        for (String word : wordsList) {
            practiceWordsMenu.addSubMenu(4, itemIndex++, 0, word);
            id_words_alpha_map.put(itemIndex-1,word);
        }

        Collections.shuffle(alphabetsList, new Random(1));
        Collections.shuffle(wordsList, new Random(1));

        for (String letter : alphabetsList) {
            quizAlphaMenu.addSubMenu(3, itemIndex++, 0, letter);
            id_words_alpha_map.put(itemIndex-1,letter);
        }

        for (String word : wordsList) {
            quizWordsMenu.addSubMenu(4, itemIndex++, 0, word);
            id_words_alpha_map.put(itemIndex-1,word);
        }
        max_data_id=itemIndex-1;
        return true;
    }

   /* @Override
    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS ||
                featureId == Window.FEATURE_OPTIONS_PANEL) {
            getMenuInflater().inflate(R.menu.activity_menu, menu);
            return true;
        }
        // Pass through to super to setup touch menu.
        return super.onCreatePanelMenu(featureId, menu);
    }
*/

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle item selection. Menu items typically start another
        // activity, start a service, or broadcast another intent.
        switch (item.getItemId()) {
            /*case R.id.alphabets:
                Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                startActivityForResult(intent, 1);
                return false;*/
            case R.id.practice:
                break;
            case R.id.quiz:
                break;
            case R.id.practice_alphabets:
                //Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                //startActivityForResult(intent, 1);
                //return false;
            case R.id.practice_words:
                //System.out.println("Inside practice word");
                //SendImageData sendImageData_in= new SendImageData();
                //sendImageData_in.execute();
              //  Mat m = Mat.zeros(100,400, CvType.CV_8UC3);
               // Core.putText(m, "hello world", new Point(30,80), Core.FONT_HERSHEY_SCRIPT_SIMPLEX, 2.2, new Scalar(200,200,0),2);

                break;
            case R.id.practice_images:
                break;
            case R.id.quiz_alphabets:
                //Intent intent1 = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                //startActivityForResult(intent1, 1);
                //return false;
            case R.id.quiz_words:
                break;
            case R.id.quiz_images:
                break;
            default:
                return super.onOptionsItemSelected(item);
        }
        return true;
    }

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS ||
                featureId == Window.FEATURE_OPTIONS_PANEL) {


            int curr_id=item.getItemId();
            if(curr_id>=min_data_id&&curr_id<=max_data_id) {
                curr_string = id_words_alpha_map.get(item.getItemId());
                System.out.println("Id number and respective word is");
                System.out.println(item.getItemId());
                System.out.println(curr_string);
                this.setContentView(cameraSurfaceView);
            }
            if(curr_id==2||curr_id==5){//2 and 5 are ids for practice images and quiz images respectively
                System.out.println("Inside Images");
                //System.out.println(item.getItemId());
                image_labeling_flag=true;
                this.setContentView(cameraSurfaceView);

            }
            switch (item.getItemId()) {
                case R.id.practice:
                    break;
                case R.id.quiz:
                    break;
                case R.id.practice_alphabets:
                    //Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                    //startActivityForResult(intent, 1);
                    //return false;
                case R.id.practice_words:
                    //doInBackground();
                    System.out.println("Inside practice word");
                    //SendImageData sendImageData_in= new SendImageData();
                    //sendImageData_in.execute();
                    break;
                case R.id.practice_images:
                    this.setContentView(cameraSurfaceView);
                    break;
                case R.id.quiz_alphabets:
                    Intent intent1 = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                    startActivityForResult(intent1, 1);
                    return false;
                case R.id.quiz_words:
                    break;
                case R.id.quiz_images:
                    break;
                default:
                    return true;
            }
            return true;
        }
        // Good practice to pass through to super if not handled
        return super.onMenuItemSelected(featureId, item);
    }




    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();

        // Do not hold the camera during onResume
        if (cameraSurfaceView != null) {
            cameraSurfaceView.releaseCamera();
        }
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();

        // Do not hold the camera during onPause
        if (cameraSurfaceView != null) {
            cameraSurfaceView.releaseCamera();
        }
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.self_tutor);
        return card.getView();
    }

    //Override onActivityResult
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // Handle photos

        System.out.println("Inside onActivityResult");
        System.out.println(data.toString());
        System.out.println(requestCode);
        System.out.println(resultCode);
        System.out.println(RESULT_OK);
        System.out.println(Activity.RESULT_OK);

        if (requestCode == TAKE_PICTURE_REQUEST) {
            String picturePath = data.getStringExtra(Intents.EXTRA_PICTURE_FILE_PATH);
            System.out.println(picturePath);
            System.out.println("Inside onActivityResult");
            //Toast.makeText(getApplicationContext(), picturePath,
            //	Toast.LENGTH_SHORT).show();

            processPictureWhenReady(picturePath);
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    /*
     * Send generic motion events to the gesture detector
     */
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (gestureDetector != null) {
            return gestureDetector.onMotionEvent(event);
        }

        return false;
    }


    //Create Gesture Detector
    private GestureDetector createGestureDetector(final Context context) {
        GestureDetector gestureDetector = new GestureDetector(context);

        //Create a Base Listener
        gestureDetector.setBaseListener(new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture)
            {

                //double tap for speech
                if(gesture==Gesture.SWIPE_UP) {
                    System.out.println("Speak current String");
                    if(!image_labeling_flag) {
                        System.out.println(curr_string);
                        speak(curr_string);
                    }
                }
                // Make sure view is initiated
                if (cameraSurfaceView != null) {
                    System.out.println("Inside Camera View");
                    // Tap with a single finger for photo
                    if (gesture == Gesture.TAP) {
                        if (responseImageShown) {
                            //Shift to Another card
                            setContentView(mCardScroller);
                            responseImageShown = false;
                        } else {
                            System.out.println("Inside Gesture - TAP");
                            //Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                            Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                            if (intent != null) {
                                System.out.println("Inside Intent");
                                Toast.makeText(getApplicationContext(), "Taking Picture",
                                        Toast.LENGTH_SHORT).show();

                                //Set resultCode
                                if (getParent() == null) {
                                    setResult(Activity.RESULT_OK, intent);
                                }
                                else {
                                    getParent().setResult(Activity.RESULT_OK, intent);
                                }

                                startActivityForResult(intent, TAKE_PICTURE_REQUEST);
                                System.out.println("After startActivityForResult");
                            }
                        }

                        return true;
                    }
                }
                return false;
            }
        });
        return gestureDetector;
    }


    /*
 Text to Speech Conversion onInit function

 */
    @Override
    public void onInit(int status) {
        if (status == TextToSpeech.SUCCESS) {
            initialized = true;
            tts.setLanguage(Locale.ENGLISH);

            if (queuedText != null) {
                speak(queuedText);
            }
        }
    }

    public void speak(String text) {
        // If not yet initialized, queue up the text.
        System.out.println("Speak called");
        if (!initialized) {
            queuedText = text;
            return;
        }
        System.out.println("Speak 2 called");
        queuedText = null;
        // Before speaking the current text, stop any ongoing speech.
        tts.stop();
        // Speak the text.
        System.out.println("tts called");
        tts.speak(text, TextToSpeech.QUEUE_FLUSH, null);
    }



    //Send the captured image to server
    private void processPictureWhenReady(final String picturePath) {
        System.out.println("Starting ProcessPictureWhenReady");
        final File pictureFile = new File(picturePath);

        if (pictureFile.exists())
        {
            // This is where we'll want to do our thing
            SendImageData sendImageData_in= new SendImageData();
            System.out.println("Timestamp - SendImageData - start");
            System.out.println(System.currentTimeMillis());
            String []params= new String[3];
            try {

                if(image_labeling_flag){

                    image_labeling_flag=false;
                    params[0] = "Image";
                    params[1] = "";
                    params[2] = picturePath;
                }
                else{

                    params[0] = "Text";
                    params[1] = curr_string;
                    params[2] = picturePath;
                }
                String processedImageString = sendImageData_in.execute(params).get();
                System.out.print("#### Processed Image String Length");
                System.out.print(processedImageString.length());
                byte[] decodedImageString = Base64.decode(processedImageString, Base64.DEFAULT);
                Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedImageString, 0, decodedImageString.length);

                /*
                //Scale down Image
                int newHeight = (int) (decodedByte.getHeight() * (512.0 / decodedByte.getWidth()));
                decodedByte = Bitmap.createScaledBitmap(decodedByte, 512, newHeight, true);
                */
                
                ImageView imageView =  new ImageView(this);
                imageView.setImageBitmap(decodedByte);
                imageView.setScaleType(ImageView.ScaleType.CENTER);


                //View cardView = card.get();
                //cardView.setScaleType(ImageView.ScaleType.CENTER);

                this.setContentView(imageView);
                responseImageShown = true;

                System.out.print("\n");
            } catch (Exception e) {
                e.printStackTrace();
            }


        }
        else
        {
            // The file does not exist yet. Before starting the file observer, you
            // can update your UI to let the user know that the application is
            // waiting for the picture (for example, by displaying the thumbnail
            // image and a progress indicator).




            final File parentDirectory = pictureFile.getParentFile();

            FileObserver observer = new FileObserver(parentDirectory.getPath(),
                    FileObserver.CLOSE_WRITE | FileObserver.MOVED_TO) {
                private boolean isFileWritten;

                @Override
                public void onEvent(int event, String path) {

                    if (!isFileWritten) {

                        File affectedFile = new File(parentDirectory, path);
                        isFileWritten = affectedFile.equals(pictureFile);

                        if (isFileWritten) {
                            stopWatching();

                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    processPictureWhenReady(picturePath);
                                }
                            });
                        }
                    }
                }
            };
            observer.startWatching();
        }
    }

}

