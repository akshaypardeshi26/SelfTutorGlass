package com.helloglass;

//Gesture Files
import com.google.android.glass.content.Intents;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.view.WindowUtils;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.hardware.Camera;
import android.media.AudioManager;
import android.os.Bundle;
import android.content.Intent;
import android.provider.MediaStore;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.Toast;
import org.json.*;
import org.json.simple.parser.*;
import org.apache.http.*;
import org.apache.http.message.*;
import org.opencv.android.CameraBridgeViewBase;

import java.util.*;




/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    //Create surfaceView object
    private CameraSurfaceView cameraSurfaceView;
    private static int TAKE_PICTURE_REQUEST = 1;
    private GestureDetector gestureDetector = null;


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        //Initiate Camera View
        cameraSurfaceView = new CameraSurfaceView(this);

        //Turn on Gestures
        gestureDetector = createGestureDetector(this);

        //requests voice menu on this activity
        getWindow().requestFeature(WindowUtils.FEATURE_VOICE_COMMANDS);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                //AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                //am.playSoundEffect(Sounds.DISALLOWED);
                openOptionsMenu();
            }
        });
        setContentView(mCardScroller);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.activity_menu, menu);
        return true;
    }

    @Override
    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS ||
                featureId == Window.FEATURE_OPTIONS_PANEL) {
            getMenuInflater().inflate(R.menu.activity_menu, menu);
            return true;
        }
        // Pass through to super to setup touch menu.
        return super.onCreatePanelMenu(featureId, menu);
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle item selection. Menu items typically start another
        // activity, start a service, or broadcast another intent.
        switch (item.getItemId()) {
            /*case R.id.alphabets:
                Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                startActivityForResult(intent, 1);
                return false;*/
            case R.id.practice:
                break;
            case R.id.quiz:
                break;
            case R.id.practice_alphabets:
                Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                startActivityForResult(intent, 1);
                return false;
            case R.id.practice_words:
                //System.out.println("Inside practice word");
                //SendImageData sendImageData_in= new SendImageData();
                //sendImageData_in.execute();
              //  Mat m = Mat.zeros(100,400, CvType.CV_8UC3);
               // Core.putText(m, "hello world", new Point(30,80), Core.FONT_HERSHEY_SCRIPT_SIMPLEX, 2.2, new Scalar(200,200,0),2);

                break;
            case R.id.practice_images:
                break;
            case R.id.quiz_alphabets:
                Intent intent1 = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                startActivityForResult(intent1, 1);
                return false;
            case R.id.quiz_words:
                break;
            case R.id.quiz_images:
                break;
            default:
                return super.onOptionsItemSelected(item);
        }
        return true;
    }

    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item) {
        if (featureId == WindowUtils.FEATURE_VOICE_COMMANDS ||
                featureId == Window.FEATURE_OPTIONS_PANEL) {
            switch (item.getItemId()) {
                case R.id.practice:
                    break;
                case R.id.quiz:
                    break;
                case R.id.practice_alphabets:
                    Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                    startActivityForResult(intent, 1);
                    return false;
                case R.id.practice_words:
                    //doInBackground();
                    System.out.println("Inside practice word");
                    SendImageData sendImageData_in= new SendImageData();
                    sendImageData_in.execute();
                    break;
                case R.id.practice_images:
                    this.setContentView(cameraSurfaceView);
                    break;
                case R.id.quiz_alphabets:
                    Intent intent1 = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                    startActivityForResult(intent1, 1);
                    return false;
                case R.id.quiz_words:
                    break;
                case R.id.quiz_images:
                    break;
                default:
                    return true;
            }
            return true;
        }
        // Good practice to pass through to super if not handled
        return super.onMenuItemSelected(featureId, item);
    }




    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();

        // Do not hold the camera during onResume
        if (cameraSurfaceView != null) {
            cameraSurfaceView.releaseCamera();
        }
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();

        // Do not hold the camera during onPause
        if (cameraSurfaceView != null) {
            cameraSurfaceView.releaseCamera();
        }
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.self_tutor);
        return card.getView();
    }

    //Override onActivityResult
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // Handle photos

        System.out.println("Inside onActivityResult");
        System.out.println(data.toString());
        System.out.println(requestCode);
        System.out.println(resultCode);
        System.out.println(RESULT_OK);
        System.out.println(Activity.RESULT_OK);

        if (requestCode == TAKE_PICTURE_REQUEST) {
            String picturePath = data.getStringExtra(Intents.EXTRA_PICTURE_FILE_PATH);
            System.out.println(picturePath);
            System.out.println("Inside onActivityResult");
            //Toast.makeText(getApplicationContext(), picturePath,
            //	Toast.LENGTH_SHORT).show();

            //processPictureWhenReady(picturePath);
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    /*
     * Send generic motion events to the gesture detector
     */
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (gestureDetector != null) {
            return gestureDetector.onMotionEvent(event);
        }

        return false;
    }


    //Create Gesture Detector
    private GestureDetector createGestureDetector(final Context context) {
        GestureDetector gestureDetector = new GestureDetector(context);

        //Create a Base Listener
        gestureDetector.setBaseListener(new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture)
            {
                // Make sure view is initiated
                if (cameraSurfaceView != null) {
                    System.out.println("Inside Camera View");
                    // Tap with a single finger for photo
                    if (gesture == Gesture.TAP) {
                        System.out.println("Inside Gesture - TAP");
                        //Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        Intent intent = new Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA);
                        if (intent != null) {
                            System.out.println("Inside Intent");
                            Toast.makeText(getApplicationContext(), "Taking Picture",
                                    Toast.LENGTH_SHORT).show();

                            //Set resultCode
                            if (getParent() == null) {
                                setResult(Activity.RESULT_OK, intent);
                            }
                            else {
                                getParent().setResult(Activity.RESULT_OK, intent);
                            }

                            startActivityForResult(intent, TAKE_PICTURE_REQUEST);
                            System.out.println("After startActivityForResult");
                        }
                        return true;
                    }
                }
                return false;
            }
        });
        return gestureDetector;
    }
}

